package erpsolaps.erpsolapsmodel.erpsolapseo;

import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobalsEntityImpl;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 30 10:13:58 PKT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NoteDetailImpl extends ERPSolGlobalsEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SeqNo {
            public Object get(NoteDetailImpl obj) {
                return obj.getSeqNo();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setSeqNo((Integer) value);
            }
        }
        ,
        NoteCode {
            public Object get(NoteDetailImpl obj) {
                return obj.getNoteCode();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setNoteCode((String) value);
            }
        }
        ,
        RefDocument {
            public Object get(NoteDetailImpl obj) {
                return obj.getRefDocument();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setRefDocument((String) value);
            }
        }
        ,
        Amount {
            public Object get(NoteDetailImpl obj) {
                return obj.getAmount();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setAmount((BigDecimal) value);
            }
        }
        ,
        Balance {
            public Object get(NoteDetailImpl obj) {
                return obj.getBalance();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setBalance((BigDecimal) value);
            }
        }
        ,
        Createdby {
            public Object get(NoteDetailImpl obj) {
                return obj.getCreatedby();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setCreatedby((String) value);
            }
        }
        ,
        Modifiedby {
            public Object get(NoteDetailImpl obj) {
                return obj.getModifiedby();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setModifiedby((String) value);
            }
        }
        ,
        CreatedDate {
            public Object get(NoteDetailImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setCreatedDate((Date) value);
            }
        }
        ,
        ModifiedDate {
            public Object get(NoteDetailImpl obj) {
                return obj.getModifiedDate();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setModifiedDate((Date) value);
            }
        }
        ,
        DocTypeId {
            public Object get(NoteDetailImpl obj) {
                return obj.getDocTypeId();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setDocTypeId((String) value);
            }
        }
        ,
        GlCode {
            public Object get(NoteDetailImpl obj) {
                return obj.getGlCode();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setGlCode((String) value);
            }
        }
        ,
        Costcenter {
            public Object get(NoteDetailImpl obj) {
                return obj.getCostcenter();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setCostcenter((String) value);
            }
        }
        ,
        RefDocumentType {
            public Object get(NoteDetailImpl obj) {
                return obj.getRefDocumentType();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setRefDocumentType((String) value);
            }
        }
        ,
        FcurrAmount {
            public Object get(NoteDetailImpl obj) {
                return obj.getFcurrAmount();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setFcurrAmount((BigDecimal) value);
            }
        }
        ,
        Gmoveid {
            public Object get(NoteDetailImpl obj) {
                return obj.getGmoveid();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setGmoveid((String) value);
            }
        }
        ,
        GmBalance {
            public Object get(NoteDetailImpl obj) {
                return obj.getGmBalance();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setGmBalance((BigDecimal) value);
            }
        }
        ,
        GmDocTypeId {
            public Object get(NoteDetailImpl obj) {
                return obj.getGmDocTypeId();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setGmDocTypeId((String) value);
            }
        }
        ,
        Notecodeseq {
            public Object get(NoteDetailImpl obj) {
                return obj.getNotecodeseq();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setNotecodeseq((Integer) value);
            }
        }
        ,
        NoteMaster {
            public Object get(NoteDetailImpl obj) {
                return obj.getNoteMaster();
            }

            public void put(NoteDetailImpl obj, Object value) {
                obj.setNoteMaster((NoteMasterImpl) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(NoteDetailImpl object);

        public abstract void put(NoteDetailImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SEQNO = AttributesEnum.SeqNo.index();
    public static final int NOTECODE = AttributesEnum.NoteCode.index();
    public static final int REFDOCUMENT = AttributesEnum.RefDocument.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int BALANCE = AttributesEnum.Balance.index();
    public static final int CREATEDBY = AttributesEnum.Createdby.index();
    public static final int MODIFIEDBY = AttributesEnum.Modifiedby.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();
    public static final int DOCTYPEID = AttributesEnum.DocTypeId.index();
    public static final int GLCODE = AttributesEnum.GlCode.index();
    public static final int COSTCENTER = AttributesEnum.Costcenter.index();
    public static final int REFDOCUMENTTYPE = AttributesEnum.RefDocumentType.index();
    public static final int FCURRAMOUNT = AttributesEnum.FcurrAmount.index();
    public static final int GMOVEID = AttributesEnum.Gmoveid.index();
    public static final int GMBALANCE = AttributesEnum.GmBalance.index();
    public static final int GMDOCTYPEID = AttributesEnum.GmDocTypeId.index();
    public static final int NOTECODESEQ = AttributesEnum.Notecodeseq.index();
    public static final int NOTEMASTER = AttributesEnum.NoteMaster.index();

    /**
     * This is the default constructor (do not remove).
     */
    public NoteDetailImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("erpsolaps.erpsolapsmodel.erpsolapseo.NoteDetail");
    }


    /**
     * Gets the attribute value for SeqNo, using the alias name SeqNo.
     * @return the value of SeqNo
     */
    public Integer getSeqNo() {
        return (Integer) getAttributeInternal(SEQNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SeqNo.
     * @param value value to set the SeqNo
     */
    public void setSeqNo(Integer value) {
        setAttributeInternal(SEQNO, value);
    }

    /**
     * Gets the attribute value for NoteCode, using the alias name NoteCode.
     * @return the value of NoteCode
     */
    public String getNoteCode() {
        return (String) getAttributeInternal(NOTECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for NoteCode.
     * @param value value to set the NoteCode
     */
    public void setNoteCode(String value) {
        setAttributeInternal(NOTECODE, value);
    }

    /**
     * Gets the attribute value for RefDocument, using the alias name RefDocument.
     * @return the value of RefDocument
     */
    public String getRefDocument() {
        return (String) getAttributeInternal(REFDOCUMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefDocument.
     * @param value value to set the RefDocument
     */
    public void setRefDocument(String value) {
        setAttributeInternal(REFDOCUMENT, value);
    }

    /**
     * Gets the attribute value for Amount, using the alias name Amount.
     * @return the value of Amount
     */
    public BigDecimal getAmount() {
        return (BigDecimal) getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amount.
     * @param value value to set the Amount
     */
    public void setAmount(BigDecimal value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for Balance, using the alias name Balance.
     * @return the value of Balance
     */
    public BigDecimal getBalance() {
        return (BigDecimal) getAttributeInternal(BALANCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Balance.
     * @param value value to set the Balance
     */
    public void setBalance(BigDecimal value) {
        setAttributeInternal(BALANCE, value);
    }

    /**
     * Gets the attribute value for Createdby, using the alias name Createdby.
     * @return the value of Createdby
     */
    public String getCreatedby() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Createdby.
     * @param value value to set the Createdby
     */
    public void setCreatedby(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for Modifiedby, using the alias name Modifiedby.
     * @return the value of Modifiedby
     */
    public String getModifiedby() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Modifiedby.
     * @param value value to set the Modifiedby
     */
    public void setModifiedby(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
     * @return the value of ModifiedDate
     */
    public Date getModifiedDate() {
        return (Date) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedDate.
     * @param value value to set the ModifiedDate
     */
    public void setModifiedDate(Date value) {
        setAttributeInternal(MODIFIEDDATE, value);
    }

    /**
     * Gets the attribute value for DocTypeId, using the alias name DocTypeId.
     * @return the value of DocTypeId
     */
    public String getDocTypeId() {
        return (String) getAttributeInternal(DOCTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocTypeId.
     * @param value value to set the DocTypeId
     */
    public void setDocTypeId(String value) {
        setAttributeInternal(DOCTYPEID, value);
    }

    /**
     * Gets the attribute value for GlCode, using the alias name GlCode.
     * @return the value of GlCode
     */
    public String getGlCode() {
        return (String) getAttributeInternal(GLCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for GlCode.
     * @param value value to set the GlCode
     */
    public void setGlCode(String value) {
        setAttributeInternal(GLCODE, value);
    }

    /**
     * Gets the attribute value for Costcenter, using the alias name Costcenter.
     * @return the value of Costcenter
     */
    public String getCostcenter() {
        return (String) getAttributeInternal(COSTCENTER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Costcenter.
     * @param value value to set the Costcenter
     */
    public void setCostcenter(String value) {
        setAttributeInternal(COSTCENTER, value);
    }

    /**
     * Gets the attribute value for RefDocumentType, using the alias name RefDocumentType.
     * @return the value of RefDocumentType
     */
    public String getRefDocumentType() {
        return (String) getAttributeInternal(REFDOCUMENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefDocumentType.
     * @param value value to set the RefDocumentType
     */
    public void setRefDocumentType(String value) {
        setAttributeInternal(REFDOCUMENTTYPE, value);
    }

    /**
     * Gets the attribute value for FcurrAmount, using the alias name FcurrAmount.
     * @return the value of FcurrAmount
     */
    public BigDecimal getFcurrAmount() {
        return (BigDecimal) getAttributeInternal(FCURRAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for FcurrAmount.
     * @param value value to set the FcurrAmount
     */
    public void setFcurrAmount(BigDecimal value) {
        setAttributeInternal(FCURRAMOUNT, value);
    }

    /**
     * Gets the attribute value for Gmoveid, using the alias name Gmoveid.
     * @return the value of Gmoveid
     */
    public String getGmoveid() {
        return (String) getAttributeInternal(GMOVEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Gmoveid.
     * @param value value to set the Gmoveid
     */
    public void setGmoveid(String value) {
        setAttributeInternal(GMOVEID, value);
    }

    /**
     * Gets the attribute value for GmBalance, using the alias name GmBalance.
     * @return the value of GmBalance
     */
    public BigDecimal getGmBalance() {
        return (BigDecimal) getAttributeInternal(GMBALANCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for GmBalance.
     * @param value value to set the GmBalance
     */
    public void setGmBalance(BigDecimal value) {
        setAttributeInternal(GMBALANCE, value);
    }

    /**
     * Gets the attribute value for GmDocTypeId, using the alias name GmDocTypeId.
     * @return the value of GmDocTypeId
     */
    public String getGmDocTypeId() {
        return (String) getAttributeInternal(GMDOCTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for GmDocTypeId.
     * @param value value to set the GmDocTypeId
     */
    public void setGmDocTypeId(String value) {
        setAttributeInternal(GMDOCTYPEID, value);
    }

    /**
     * Gets the attribute value for Notecodeseq, using the alias name Notecodeseq.
     * @return the value of Notecodeseq
     */
    public Integer getNotecodeseq() {
        return (Integer) getAttributeInternal(NOTECODESEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for Notecodeseq.
     * @param value value to set the Notecodeseq
     */
    public void setNotecodeseq(Integer value) {
        setAttributeInternal(NOTECODESEQ, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity NoteMasterImpl.
     */
    public NoteMasterImpl getNoteMaster() {
        return (NoteMasterImpl) getAttributeInternal(NOTEMASTER);
    }

    /**
     * Sets <code>value</code> as the associated entity NoteMasterImpl.
     */
    public void setNoteMaster(NoteMasterImpl value) {
        setAttributeInternal(NOTEMASTER, value);
    }


    /**
     * @param seqNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer seqNo) {
        return new Key(new Object[] { seqNo });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setERPSolPKSeqName("NOTE_DETAIL_SEQ");
        setERPSolPKColumnName("SeqNo");        
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
            populateAttributeAsChanged(NOTECODE, getNoteMaster().getAttribute("NoteCode"));
       }
        else
        if (operation==DML_UPDATE) {
            populateAttributeAsChanged(AMOUNT, getFcurrAmount());
        }
        super.doDML(operation, e);
    }
}


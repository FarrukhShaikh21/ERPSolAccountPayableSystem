package erpsolaps.erpsolapsmodel.erpsolapseo;

import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobClassModel;
import erpsolglob.erpsolglobmodel.erpsolglobclasses.ERPSolGlobalsEntityImpl;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 17 21:03:54 PKT 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PuSupplierCategoriesImpl extends ERPSolGlobalsEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Suppcategoryid {
            public Object get(PuSupplierCategoriesImpl obj) {
                return obj.getSuppcategoryid();
            }

            public void put(PuSupplierCategoriesImpl obj, Object value) {
                obj.setSuppcategoryid((String) value);
            }
        }
        ,
        Description {
            public Object get(PuSupplierCategoriesImpl obj) {
                return obj.getDescription();
            }

            public void put(PuSupplierCategoriesImpl obj, Object value) {
                obj.setDescription((String) value);
            }
        }
        ,
        Createdby {
            public Object get(PuSupplierCategoriesImpl obj) {
                return obj.getCreatedby();
            }

            public void put(PuSupplierCategoriesImpl obj, Object value) {
                obj.setCreatedby((String) value);
            }
        }
        ,
        CreatedDate {
            public Object get(PuSupplierCategoriesImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(PuSupplierCategoriesImpl obj, Object value) {
                obj.setCreatedDate((Date) value);
            }
        }
        ,
        Modifiedby {
            public Object get(PuSupplierCategoriesImpl obj) {
                return obj.getModifiedby();
            }

            public void put(PuSupplierCategoriesImpl obj, Object value) {
                obj.setModifiedby((String) value);
            }
        }
        ,
        ModifiedDate {
            public Object get(PuSupplierCategoriesImpl obj) {
                return obj.getModifiedDate();
            }

            public void put(PuSupplierCategoriesImpl obj, Object value) {
                obj.setModifiedDate((Date) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(PuSupplierCategoriesImpl object);

        public abstract void put(PuSupplierCategoriesImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SUPPCATEGORYID = AttributesEnum.Suppcategoryid.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int CREATEDBY = AttributesEnum.Createdby.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int MODIFIEDBY = AttributesEnum.Modifiedby.index();
    public static final int MODIFIEDDATE = AttributesEnum.ModifiedDate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PuSupplierCategoriesImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("erpsolaps.erpsolapsmodel.erpsolapseo.PuSupplierCategories");
    }


    /**
     * Gets the attribute value for Suppcategoryid, using the alias name Suppcategoryid.
     * @return the value of Suppcategoryid
     */
    public String getSuppcategoryid() {
        return (String) getAttributeInternal(SUPPCATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Suppcategoryid.
     * @param value value to set the Suppcategoryid
     */
    public void setSuppcategoryid(String value) {
        setAttributeInternal(SUPPCATEGORYID, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for Createdby, using the alias name Createdby.
     * @return the value of Createdby
     */
    public String getCreatedby() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Createdby.
     * @param value value to set the Createdby
     */
    public void setCreatedby(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Modifiedby, using the alias name Modifiedby.
     * @return the value of Modifiedby
     */
    public String getModifiedby() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Modifiedby.
     * @param value value to set the Modifiedby
     */
    public void setModifiedby(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for ModifiedDate, using the alias name ModifiedDate.
     * @return the value of ModifiedDate
     */
    public Date getModifiedDate() {
        return (Date) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifiedDate.
     * @param value value to set the ModifiedDate
     */
    public void setModifiedDate(Date value) {
        setAttributeInternal(MODIFIEDDATE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param suppcategoryid key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String suppcategoryid) {
        return new Key(new Object[] { suppcategoryid });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setERPISGenertePK("NO");
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
            String pkValue=" lpad(func_get_max_id('Pu_Supplier_Categories','suppcategoryid*1'),4,0) ";
         String result =
             ERPSolGlobClassModel.doGetERPSolPrimaryKeyValueModel(getDBTransaction(), pkValue, "dual", null, null);
         populateAttributeAsChanged(SUPPCATEGORYID, result);
        }
        if (operation!=DML_DELETE) {
           populateAttributeAsChanged(DESCRIPTION, getDescription().toUpperCase());
       }
        super.doDML(operation, e);
    }
}

